{"componentChunkName":"component---src-templates-blog-post-js","path":"/bash/12-value-seperator/","result":{"data":{"site":{"siteMetadata":{"title":"Rahul's Blog"}},"markdownRemark":{"id":"df559823-085c-56f0-8479-342c2d9f2fcf","excerpt":"","html":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># you can set what seperates the values with IFS</span>\n\n<span class=\"token comment\"># store the original IFS</span>\n<span class=\"token assign-left variable\">OIFS</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token environment constant\">$IFS</span>\"</span>\n\n<span class=\"token comment\"># set what seperates the input values</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">IFS</span></span><span class=\"token operator\">=</span><span class=\"token string\">\",\"</span>\n\n<span class=\"token builtin class-name\">read</span> -p <span class=\"token string\">\"Enter 2 values to sum: \"</span> num1 num2\n\n<span class=\"token comment\"># echo $num1</span>\n<span class=\"token comment\"># echo $num2</span>\n\n<span class=\"token comment\"># use the parameter expansion ${} to substitute any whitespace </span>\n<span class=\"token comment\"># with nothing</span>\n<span class=\"token assign-left variable\">num1</span><span class=\"token operator\">=</span><span class=\"token variable\">${num1<span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token operator\">:</span>blank<span class=\"token operator\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>}</span>\n<span class=\"token assign-left variable\">num2</span><span class=\"token operator\">=</span><span class=\"token variable\">${num2<span class=\"token operator\">/</span><span class=\"token operator\">/</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token operator\">:</span>blank<span class=\"token operator\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>}</span>\n\n<span class=\"token comment\"># echo $num1</span>\n<span class=\"token comment\"># echo $num2</span>\n\n<span class=\"token assign-left variable\">sum</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>num1<span class=\"token operator\">+</span>num2<span class=\"token variable\">))</span></span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$num1</span> + <span class=\"token variable\">$num2</span> = <span class=\"token variable\">$sum</span>\"</span>\n\n<span class=\"token comment\"># reset the IFS to original value</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">IFS</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$OIFS</span>\"</span>\n\n<span class=\"token comment\"># parameter expansion allows you to do this</span>\n<span class=\"token comment\"># the search and replace allows this</span>\n<span class=\"token assign-left variable\">samp_string</span><span class=\"token operator\">=</span><span class=\"token string\">\"The dog climbed the tree\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">${samp_string<span class=\"token operator\">/</span><span class=\"token operator\">/</span>dog<span class=\"token operator\">/</span>cat}</span>\"</span>\n\n<span class=\"token comment\"># you can assign a default value if it doesn't exist</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"I am <span class=\"token variable\">${name<span class=\"token operator\">:-</span>Rahul}</span>\"</span>\n\n<span class=\"token comment\"># this uses the default value if it doesn't exists and assigns the value</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"I am <span class=\"token variable\">${name<span class=\"token operator\">:=</span>titu}</span>\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$name</span>\"</span></code></pre></div>","frontmatter":{"title":"Bash Shell Scripting: Value seperator in strings","date":"July 21, 2020","description":"learn how to seperate the value with IFS and how to use parameter expansion in bash shell scripting"}}},"pageContext":{"slug":"/bash/12-value-seperator/","previous":{"fields":{"slug":"/bash/2-input-with-conditions/"},"frontmatter":{"title":"Bash Shell Scripting: Input and Conditionals(if else)"}},"next":{"fields":{"slug":"/bash/11-positional-parameters/"},"frontmatter":{"title":"Bash Shell Scripting: Positional Parameters"}}}}}