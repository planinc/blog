{"componentChunkName":"component---src-templates-blog-post-js","path":"/bash/1-variables/","result":{"data":{"site":{"siteMetadata":{"title":"Rahul's Blog"}},"markdownRemark":{"id":"ec0cf067-4910-50a2-ac5b-b11f85527900","excerpt":"Bash Path(Shabang or Hashbang) #!/bin/bash also know as  or , is the neccessary command to run the bash script. It is basically the path to bash. Sometimes whenâ€¦","html":"<h2>Bash Path(Shabang or Hashbang)</h2>\n<p><strong>#!/bin/bash</strong> also know as <code class=\"language-text\">shabang</code> or <code class=\"language-text\">hashbang</code>, is the neccessary command to run the bash script. It is basically the path to bash.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello World!\"</span>\n\n<span class=\"token comment\"># Output</span>\n<span class=\"token comment\"># Hello World!</span></code></pre></div>\n<p>Sometimes when the number of commands are large enough, it becomes difficult to understand which command is doing what. So by adding <code class=\"language-text\">-x</code> after <code class=\"language-text\">#!/bin/bash</code>, the commands will be visible along with the result in the output</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash -x</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Hello World!\"</span>\n<span class=\"token comment\"># Output</span>\n<span class=\"token comment\"># + echo 'Hello World!'</span>\n<span class=\"token comment\"># Hello World!</span></code></pre></div>\n<h2>Variables</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">num1</span><span class=\"token operator\">=</span><span class=\"token number\">5</span> <span class=\"token comment\"># give no space before and after of '='</span>\n<span class=\"token assign-left variable\">num2</span><span class=\"token operator\">=</span><span class=\"token number\">6</span>\n<span class=\"token builtin class-name\">declare</span> -r <span class=\"token assign-left variable\">MIN</span><span class=\"token operator\">=</span><span class=\"token number\">5</span> <span class=\"token comment\"># declare constant variable</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"<span class=\"token variable\">$num1</span>\"</span> <span class=\"token comment\"># print variable</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$num1</span>**2 <span class=\"token comment\"># shell takes everything as string, so it will output: 5**2</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>num1<span class=\"token operator\">+</span>num2<span class=\"token variable\">))</span></span> <span class=\"token comment\"># $(()) is used for mathematical calculation</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>num1<span class=\"token operator\">**</span>MIN<span class=\"token variable\">))</span></span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\"><span class=\"token variable\">$((</span>MIN<span class=\"token operator\">+</span>num1<span class=\"token variable\">))</span></span>\n\n<span class=\"token comment\"># Output</span>\n<span class=\"token comment\"># 5</span>\n<span class=\"token comment\"># 5**2</span>\n<span class=\"token comment\"># 11</span>\n<span class=\"token comment\"># 25</span>\n<span class=\"token comment\"># 10</span></code></pre></div>\n<h3>Shorthand property</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">rand</span><span class=\"token operator\">=</span><span class=\"token number\">5</span>\n<span class=\"token builtin class-name\">let</span> <span class=\"token assign-left variable\">rand</span><span class=\"token operator\">+=</span><span class=\"token number\">4</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$rand</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"rand++ = <span class=\"token variable\"><span class=\"token variable\">$((</span>rand<span class=\"token operator\">++</span><span class=\"token variable\">))</span></span>\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"++rand = <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token operator\">++</span>rand<span class=\"token variable\">))</span></span>\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"rand-- = <span class=\"token variable\"><span class=\"token variable\">$((</span>rand<span class=\"token operator\">--</span><span class=\"token variable\">))</span></span>\"</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"--rand = <span class=\"token variable\"><span class=\"token variable\">$((</span><span class=\"token operator\">--</span>rand<span class=\"token variable\">))</span></span>\"</span>\n\n<span class=\"token comment\"># Output</span>\n<span class=\"token comment\"># 9</span>\n<span class=\"token comment\"># rand++ = 9</span>\n<span class=\"token comment\"># ++rand = 11</span>\n<span class=\"token comment\"># rand-- = 11</span>\n<span class=\"token comment\"># --rand = 9</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># use python to add floats</span>\n<span class=\"token assign-left variable\">num3</span><span class=\"token operator\">=</span><span class=\"token number\">1.2</span>\n<span class=\"token assign-left variable\">num4</span><span class=\"token operator\">=</span><span class=\"token number\">4.3</span>\n<span class=\"token assign-left variable\">num5</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>python -c <span class=\"token string\">\"print(<span class=\"token variable\">$num3</span> + <span class=\"token variable\">$num4</span>)\"</span><span class=\"token variable\">)</span></span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$num5</span>\n\n<span class=\"token comment\"># Output</span>\n<span class=\"token comment\"># 5.5</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># cat prints a file or any string pass to it</span>\ncat<span class=\"token operator\">&lt;&lt;</span> END\nThis text prints many line\netc lorem ipsum END\n\n<span class=\"token comment\"># Output</span>\n<span class=\"token comment\"># This text prints many line</span>\n<span class=\"token comment\"># etc lorem ipsum</span></code></pre></div>","frontmatter":{"title":"Bash Shell Scripting: Variables","date":"July 21, 2020","description":"learn how to declare, initialise and use variables in bash shell scripting. Understand how to perform mathematical operations in bash shell scripting"}}},"pageContext":{"slug":"/bash/1-variables/","previous":{"fields":{"slug":"/bash/3-functions/"},"frontmatter":{"title":"Bash Shell Scripting: Functions"}},"next":{"fields":{"slug":"/bash/10-loops/"},"frontmatter":{"title":"Bash Shell Scripting: Loops"}}}}}